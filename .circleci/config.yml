version: 2.1
# Use a package of configuration called an orb.
orbs:
  # Choose either one of the orbs below
  # welcome: circleci/welcome-orb@0.4.1
  # aws-cli: circleci/aws-cli@2.0.3
# Define the jobs we want to run for this project
jobs:
  # myjob1:  # Choose any name, such as `build`
  #     # The primary container, where your job's commands will run
  #     docker:
  #       - image: 
  #     steps:
  #       - checkout # check out the code in the project directory
  #       - run: echo "hello world" # run the `echo` command
  create_infrastructure: 
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run:
            name: Create Cloudformation Stack
            command: |
              aws cloudformation deploy \
                --template-file template.yml \
                --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5} \
                --region us-east-1
        - run:
            name: getting server IP
            command: |
              echo [all]\n  > inventory.txt;  aws ec2 describe-instances  --query 'Reservations[*].Instances[*].PublicIpAddress' --output text > inventory.txt

  # Exercise: Config and Deployment
  configure_infrastructure: 
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
              # You can get this ID in the section where you registered the SSH Key
              fingerprints: ["06:18:dc:e7:89:dc:65:d0:fa:42:51:1d:e4:0a:20:7c"] 
      - run:
          name: Install Ansible
          command: |
            apk add --update ansible
      - run:
          name: Run Playbook and Configure server
          command: |
            ansible-playbook -i inventory.txt main4.yml
# Exercise: Smoke Testing
  smoke_test:
    docker:
      - image: alpine:latest
    steps:
      - run: apk add --update curl
      - run:
          name: smoke test
          command: |
            URL="https://blog.udacity.com/"
            # Test if website exists
            if curl -s --head ${URL} 
            then
              return 0
            else
              return 1
            fi
# Sequential workflow
workflows:
  # Name the workflow
  myWorkflow:
    jobs:
      # - create_infrastructure
      # - configure_infrastructure:
      #     requires: 
      #       - create_infrastructure
          
      - smoke_test
